---
title: "tweetGPT - what twitter is saying about ChatGPT"
author: "Takudzwanashe Michael Mhuru"
date: "03/30/2023"
output:
  rmdformats::robobook:
    highlight: "kate"
bibliography: packages.bib

nocite: '@*'
---

```{r setup, include=FALSE}
# Set code chunk defaults 
# Consider adding `message = FALSE` option
knitr::opts_chunk$set(echo = FALSE, warning = TRUE, message = FALSE) 

# Set R environment options
options(knitr.kable.NA = '')

#load packages
library(tidyverse)
library(dplyr)
library(tidyr)
library(mclust)
library(ggrepel)
library(broom)
library(dygraphs)
library(xts)
library(lubridate)
library(plotly)
library(plyr)
library(stringr)
library(sf)
library(wordcloud2)
library(textdata)
library(tidytext)
library(glue)
library(ggplot2)
library(scales)
library(vtable)
library(patchwork)

#load data
load("final_data/blog_data.RData")
data("stop_words")

#customise stop words
 custom_stop_words <-
   c("https", "t.co", "openai", "ai", "artificialintelligence", "http", "gpt", "gpt4", "nannannannannew", "t", "chatgpt", "amp")
 
 stop_words <-
   stop_words %>% 
   bind_rows(data_frame(word = custom_stop_words))
```

![](tweet.webp)

# Introduction

## Background and Motivation

ChatGPT, the openAI language model has been a trending topic in recent months following the release of its latest version, and its successes in passing the bar, AP exams, Sommerlier exams and the SAT among others. <https://www.businessinsider.com/list-here-are-the-exams-chatgpt-has-passed-so-far-2023-1?r=US&IR=T>. ChatGPT has been used to generate essays, song lyrics, emails and even CVs. Despite these positive attributes, ChatGPT along with other language models like Dall-E, have received mixed reactions from the public with concerns about security, copyright infringement, inaccuracies and potential to perpetuate biases and spread misinformation.

It is against this backdrop that I undertook this project to analyze how twitter users are talking about ChatGPT.

# About the Data

The data for this project was obtained from Kaggle. It is a collection of tweets with the hashtag #chatgpt between December 2022 and April 2023, containing discussions about the ChatGPT language model, experiences with using the model and asking for help with use-related issues. It is important to note that the discussion about ChatGPT is extensive and is contained within and without hashtags other than #chatgpt, therefore this analysis, while useful, does not capture all there is about this Twitter discourse.

# Methodology

I cleaned the data using`dplyr` and `tidytext` packages. The biggest challenge with the data was that, being tweets, it naturally contained emojis which are treated as unicode characters by R. I had to remove them using the `stringi` package. 

# Analysis

## User Analysis

I began by analyzing the user data that I had. 
The plots below show some of the basic characterisitics of the people who tweeted about ChatGPT. From the plots, we can see that a small proprtion of the users were verified, with a large unverified portion. The number of followers ranged from 0 to over 17 million, friends ranged from 0 to over 1 million and favourites ranged from 0 to nearly 1,5 million. Overall we can tell that there is a very diverse group of users talking about ChatGPT. 

```{r, fig.width=5, fig.height=2.5, fig.align='center'}
tweets_df %>%
  dplyr::count(user_verified) %>%
  drop_na() %>% 
  ggplot(aes(x = "User verified", y = n, fill = user_verified)) +
  geom_bar(stat = "identity") +
  labs(x = "User verified", y = "Count", 
       title = "Distribution of Verified and Unverified Users") +
  scale_fill_brewer(palette = "Dark2") +
  coord_polar(theta = "y") +
  theme_void()
```

```{r}
tweets_df %>% 
  select(user_followers,
         user_friends,
         user_favourites) %>% 
  dplyr::rename("followers" = "user_followers",
         "friends" = "user_friends",
         "favourites" = "user_favourites") %>% 
  st( summ = list(c( 'min(x)', 
                  'max(x)',
                  'mean(x)', 
                  'median(x)'),
                  summ.names = list(
                    c('Min',
                      'Max',
                      'Mean',
                      'Median'))))

```

I also wanted to analyze the common words that showed up in the bios of the people who tweeted about ChatGPT. The wordcloud below illustrates the most common words that appeared, filtered to omit frequencies less than 1000. For this and other subsequent wordclouds, the following words were omitted since they are frequent but not important at analysing the sentiment of the discourse: "https", "t.co", "openai", "ai", "artificialintelligence", "http", "gpt", "gpt4", "nannannannannew", "t", "chatgpt", "amp"

### Bio wordcloud

```{r, warning=FALSE, eval=TRUE, echo=FALSE, fig.width=7.5, fig.height=4.5, fig.align='center'}
#wrangle words
bio_unigrams <-
  tweets_df %>% 
  select(user_description) %>% 
  unnest_tokens(output = unigram,
                input = user_description,
                token = "words") %>% 
  anti_join(stop_words,
            by = c("unigram" = "word")) %>% 
  select(unigram) %>% 
  count() %>% 
  filter(freq > 1000)

set.seed(1234)

bio_unigrams <-
  bio_unigrams %>% 
  drop_na()

#creating a word cloud
bio_cloud <-
  wordcloud2(data = bio_unigrams,
           fontFamily = "Roboto",
           fontWeight = "normal",
           color  = "random-dark",
           size = 0.45,
           rotateRatio = 0.15,
           maxRotation = 1.57,
           minRotation = 1.57)
```

```{r, fig.width=7.5, fig.height=4.5, fig.align='center'}
bio_cloud
```
 
 
From the wordcloud, we can see that some career terms appear to be popular such as engineer, developer,  author, founder, creator and artist. Some terms related to finance appear to be popular too, with words such as crypto,  fintech, blockchain and bitcoin showing up. In general, it appears that the ChatGPT conversation draws from a wide range of users.
 
### Hashtag wordcloud

I was also interested in seeing what hashtags were used in conjuction with #chatgpt as these could add more context to the tweets. The following wordcloud shows the result, filtered for words with frequency less than 100.

```{r, eval= TRUE, echo=FALSE}
#wrangle words
hashtag_unigrams <-
  tweets_df %>% 
  select(hashtags) %>% 
  unnest_tokens(output = unigram,
                input = hashtags,
                token = "words") %>% 
  anti_join(stop_words,
            by = c("unigram" = "word")) %>% 
  select(unigram) %>% 
  count() %>% 
  filter(freq > 100)

hashtag_unigrams <-
  hashtag_unigrams %>% 
  drop_na()

set.seed(1234)

#creating a word cloud
hash_cloud <-
  wordcloud2(data = hashtag_unigrams,
           fontFamily = "Roboto",
           fontWeight = "normal",
           color  = "random-dark",
           size = 0.45,
           rotateRatio = 0.15,
           maxRotation = 1.57,
           minRotation = 1.57)
```

```{r, fig.width=7.5, fig.height=4.5, fig.align='center'}
hash_cloud
```

From the wordcloud, we can see that some of the common hashtags associated with #chatgpt in this period were #bard, #midjourney, #bing and #dalle, showing that the conversations also reference other models. Tags like #crypto, #nft , #stocks and #generativeai demonstrate the anticipated and applied use of AI in art and finance.

## Tweet analysis

Next, I wanted to analyze the tweets themselves. I created the following wordcloud from the tweets, filtered to omit frequencies less than 1000.

### Tweet wordcloud

```{r,  eval=TRUE, echo=FALSE, fig.width=7.5, fig.height=4.5, fig.align='center'}

#wrangle words
tweet_unigrams <-
  tweets_df %>% 
  select(text) %>% 
  unnest_tokens(output = unigram,
                input = text,
                token = "words") %>% 
 anti_join(stop_words,
            by = c("unigram" = "word"))%>% 
  select(unigram) %>% 
  count() %>% 
  filter(freq > 1000)
  
set.seed(1234)

tweet_unigrams <-
  tweet_unigrams %>% 
  drop_na()

#creating   a word cloud
tweet_cloud <-
  wordcloud2(data = tweet_unigrams,
           fontFamily = "Roboto",
           fontWeight = "normal",
           color  = "random-dark",
           size = 0.45,
           rotateRatio = 0.15,
           maxRotation = 1.57,
           minRotation = 1.57)
```

```{r, fig.width=7.5, fig.height=4.5, fig.align='center'}
tweet_cloud
```


From the wordcloud, we can see that the terms chatbot, answer, bing and bard were among some of the most common words in the tweets. Elon musk also made am appearence. 

### Sentiment Analysis

I was also interested in analyzing the sentiments carried by the tweets around #chatgpt. Using the `afinn` lexicon, each tweet was given a score. The `afinn` scores range from minus five(negative) to plus five (positive) for a word, so the scores were calculated per word then summed up in the tweet. The tweets were then classified into negative, positive and neutral (zero) using the nnrc lexicon. 

```{r eval=TRUE, echo=FALSE, warning=FALSE, fig.width=7.5, fig.height=4.5, fig.align='center'}
# Summarize sentiment counts
sentiment_counts <- 
  tweets_df %>%
  select(sentiment_label) %>% 
  count()

sentiment_range <-
  tweets_df %>% 
  select(sentiment_score) %>%
  count()

# Create a bar plot
g1 <-
  ggplot() +
  geom_bar(data = sentiment_counts,
           aes(x = sentiment_label, 
                             y = freq, 
                             fill = sentiment_label),
           stat = "identity",
           width = 0.2) +
  labs(x = "Sentiment", 
       y = "Count", 
       title = "Sentiment Distribution of Tweets") +
   scale_fill_brewer(palette = "Dark2") +
  theme_light() +
  theme(axis.text.x = element_text(size = 10,
                                 angle = 0,
                                 color = "black",
                                 vjust = 1,
                                 hjust = 1),
      plot.caption = element_text(hjust = 0.5)) 

g1
```

From the bar plot above, we can see that the majority of tweets were overall positive, with a small fraction being negative and a slightly smaller fraction being neutral. It is important to note that one drawback of the afinn lexicon is that it does not contextualise words but calculates their sentiment score in isolation, so there is some bias in the way it may classify tweet sentiments. Even though this was partially rectified by then summing words in a tweet, the lack of contextualization should be factored in considering the general outlook of the tweets between December 2022 and April 2023.

### Time analysis

I also decided to investigate how the volume if tweets with #chatgpt changed per day in this time period. The interactive time series graph below shows the tweet volume trend.

```{r eval=TRUE, echo=FALSE, warning=FALSE}
# Convert the "created_at" column to a date-time object
tweets_df$date <- as.POSIXct(tweets_df$date, format = "%Y-%m-%d %H:%M:%S")

# Group by date and count the number of tweets per day
tweets_per_day <-
  tweets_df %>% 
  mutate(date_of_tweet = as.Date(date, format = "%m/%d/%Y")) %>% 
  group_by(date_of_tweet) %>% 
  dplyr::summarize(total_tweets = n())

tweets_per_day <-
  tweets_per_day %>% 
  drop_na()

# Convert the data to a time series object
tweets_ts <-
  xts(tweets_per_day$total_tweets, 
      tweets_per_day$date_of_tweet)

# Create a dygraph
tweet_day_graph <-
  dygraph(tweets_ts, 
        main = "Frequency of Tweets Over Time") %>%
  dyAxis("y", label = "Number of Tweets") %>%
  dyRangeSelector() %>%
  dyHighlight(highlightCircleSize = 5,
              highlightSeriesOpts = list(strokeWidth = 2)) %>%
  dyOptions(colors = RColorBrewer::brewer.pal(8, 
                                              "Dark2")) 

```


```{r eval=TRUE, fig.width=7.5, fig.height=4.5, fig.align='center'}
tweet_day_graph
```


From the graph, we can see that there was a gradual decline in the mention of ChatGPT between December of 2022 and January in 2023 followed by a constant increase until February. From then on, the data alternates between peaks and valleys, with the highest traffic generated on February 7, coinciding with Microsoft' s announcement of its ChatGPT-powered version of Bing. The sharpest dip occured between the 19th and 21st of February. Ironically, in February, ChatGPT attracted over 1 billion visits. Perhaps people were using the model more than they were tweeting about it.

To analyse composite data of cumulative tweets and tweets per month, I constructed the plot below. The plot clearly shows that the most content was generated in February after a constant increase since January, with a gradual descent in March and into April.

```{r, eval=TRUE, echo=FALSE, warning=FALSE}
# Convert the "created_at" column to a date-time object
tweets_df$date <- as.POSIXct(tweets_df$date, format = "%Y-%m-%d %H:%M:%S")

# Group by date and count the number of tweets per day
tweets_by_day <-
  tweets_df %>% 
  mutate(date_of_tweet = as.Date(date, format = "%m/%d/%Y")) %>%
  group_by(date_of_tweet) %>% 
  dplyr::summarise(total_tweets = n())

tweets_by_day <-
  tweets_by_day %>% 
  drop_na()

tweets_cumulative <-
  tweets_by_day %>% 
  mutate(cumulative_tweets = cumsum(total_tweets))

tweets_by_month <- 
  tweets_by_day %>% 
  mutate(month = lubridate::floor_date(date_of_tweet,
                                 'month')) %>% 
  group_by(month) %>% 
  dplyr::summarise(tweet_number = sum(as.numeric(total_tweets)))

# convert tweet data to time series objects
tweet_ts <-
  xts(tweets_by_day$total_tweets, 
      tweets_by_day$date_of_tweet)

tweets_cumulative_ts <-
  xts(tweets_cumulative$cumulative_tweets,
      tweets_cumulative$date_of_tweet)

tweets_by_month_ts <-
  xts(tweets_by_month$tweet_number,
      tweets_by_month$month)

# create data frame for dygraph
tweet_data <- data.frame(date = tweets_by_day$date_of_tweet,
                         count = tweets_by_day$total_tweets)

# `cbind` tweet data with month data (this allows us to create 
# timeseries graphs with multiple data sets
tweet_prime <-
  cbind(tweet_ts, tweets_cumulative_ts, tweets_by_month_ts)

tweet_date_graph <-
  dygraph(tweet_prime,
          main = "Tweets by Date",
          group = "timeseries") %>% 
  dySeries("tweet_ts",
           label = "tweets this day") %>% 
  dySeries('tweets_by_month_ts',
           label = "tweets this month") %>% 
  dySeries("tweets_cumulative_ts",
           label = "tweets to date") %>% 
  dyOptions(colors = RColorBrewer::brewer.pal(8, "Dark2"), 
            connectSeparatedPoints = TRUE,
            fillGraph = TRUE,
            fillAlpha = 0.3) %>%
  dyLegend(width = 400) %>%
  dyRangeSelector() %>%
  dyAxis("y", label = "tweet count")

```

```{r eval=TRUE, fig.width=7.5, fig.height=4.5, fig.align='center'}
tweet_date_graph
```

# Conclusion

The world is yet to truly understand the impact that advanced language models like ChatGPT will have on society in sectors such as education, art & design and publishing. A few things are clear: that this technology is here to stay and that it is only going to get better.  Conversations like these carried on social media sites between novices and experts, proponents and oponents and creators and consumers give us a small insight in the way that the technology is being received, understood and used. 

# Future work

Initially, I had intended on using a Twitter API to scrape tweet information about ChatGPT in real time, as Twitter discourses are dynamic and incessant. In this way, my analysis would always capture the current state of the conversation on ChatGPT. At the time of publication, our access application for the API had not yet been approved by Twitter.

The Kaggle dataset used in this analysis is updated daily, however it is quite tedious to download and put the file in the server repository every day.

# References

## Dataset

ChatGPT - the tweets. Kaggle, 2023.
<https://www.kaggle.com/datasets/konradb/chatgpt-the-tweets>.

## R Packages

```{r R packages bibliography, include=FALSE}

# automatically create a bib database for R packages

knitr::write_bib(

  c(.packages(), 'knitr', 'rmarkdown'), 

  'packages.bib')#

```
